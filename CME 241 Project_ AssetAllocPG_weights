{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Clone the rl-book repository\n","!git clone https://github.com/TikhonJelvis/rl-book.git\n","\n","# Change the working directory to the rl-book directory\n","%cd rl-book\n","\n","# Move to the branch with proper installation requirements\n","!git checkout notebook\n","!pip install -r notebooks/notebook-requirements.txt\n","!pip install -e ."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7b-7VtRk5dQ3","executionInfo":{"status":"ok","timestamp":1679039144359,"user_tz":420,"elapsed":41845,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}},"outputId":"371d0e5c-5eb2-4bb8-8c2d-5507727df26d"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'rl-book'...\n","remote: Enumerating objects: 7163, done.\u001b[K\n","remote: Counting objects: 100% (890/890), done.\u001b[K\n","remote: Compressing objects: 100% (296/296), done.\u001b[K\n","remote: Total 7163 (delta 560), reused 799 (delta 531), pack-reused 6273\u001b[K\n","Receiving objects: 100% (7163/7163), 16.48 MiB | 11.93 MiB/s, done.\n","Resolving deltas: 100% (4312/4312), done.\n","/content/rl-book\n","Branch 'notebook' set up to track remote branch 'notebook' from 'origin'.\n","Switched to a new branch 'notebook'\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting more-itertools==8.4.0\n","  Downloading more_itertools-8.4.0-py3-none-any.whl (43 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.1/43.1 KB\u001b[0m \u001b[31m949.2 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting scipy==1.7.0\n","  Downloading scipy-1.7.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.whl (28.4 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m28.4/28.4 MB\u001b[0m \u001b[31m14.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting typed-ast==1.4.1\n","  Downloading typed_ast-1.4.1-cp39-cp39-manylinux1_x86_64.whl (769 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m769.2/769.2 KB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting typing-extensions==3.7.4.3\n","  Downloading typing_extensions-3.7.4.3-py3-none-any.whl (22 kB)\n","Requirement already satisfied: numpy<1.23.0,>=1.16.5 in /usr/local/lib/python3.9/dist-packages (from scipy==1.7.0->-r notebooks/notebook-requirements.txt (line 2)) (1.22.4)\n","Installing collected packages: typing-extensions, typed-ast, scipy, more-itertools\n","  Attempting uninstall: typing-extensions\n","    Found existing installation: typing_extensions 4.5.0\n","    Uninstalling typing_extensions-4.5.0:\n","      Successfully uninstalled typing_extensions-4.5.0\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.10.1\n","    Uninstalling scipy-1.10.1:\n","      Successfully uninstalled scipy-1.10.1\n","  Attempting uninstall: more-itertools\n","    Found existing installation: more-itertools 9.1.0\n","    Uninstalling more-itertools-9.1.0:\n","      Successfully uninstalled more-itertools-9.1.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","pydantic 1.10.6 requires typing-extensions>=4.2.0, but you have typing-extensions 3.7.4.3 which is incompatible.\n","bokeh 2.4.3 requires typing-extensions>=3.10.0, but you have typing-extensions 3.7.4.3 which is incompatible.\n","arviz 0.15.1 requires scipy>=1.8.0, but you have scipy 1.7.0 which is incompatible.\n","arviz 0.15.1 requires typing-extensions>=4.1.0, but you have typing-extensions 3.7.4.3 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed more-itertools-8.4.0 scipy-1.7.0 typed-ast-1.4.1 typing-extensions-3.7.4.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Obtaining file:///content/rl-book\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.9/dist-packages (from rl-book==0.0.1) (3.7.1)\n","Requirement already satisfied: more-itertools in /usr/local/lib/python3.9/dist-packages (from rl-book==0.0.1) (8.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from rl-book==0.0.1) (1.22.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from rl-book==0.0.1) (1.4.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from rl-book==0.0.1) (1.7.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (23.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (8.4.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (4.39.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (0.11.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (2.8.2)\n","Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (5.12.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (1.0.7)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (3.0.9)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->rl-book==0.0.1) (1.4.4)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->rl-book==0.0.1) (2022.7.1)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib->rl-book==0.0.1) (3.15.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.7->matplotlib->rl-book==0.0.1) (1.15.0)\n","Installing collected packages: rl-book\n","  Running setup.py develop for rl-book\n","Successfully installed rl-book-0.0.1\n"]}]},{"cell_type":"code","source":["from dataclasses import dataclass\n","from typing import Sequence, Callable, Tuple, Iterator, List\n","from rl.distribution import Distribution, SampledDistribution, Gaussian\n","from rl.markov_decision_process import MarkovDecisionProcess, \\\n","    NonTerminal, State, Terminal\n","from rl.function_approx import AdamGradient, FunctionApprox, DNNSpec, \\\n","    DNNApprox\n","from rl.approximate_dynamic_programming import QValueFunctionApprox\n","from rl.approximate_dynamic_programming import ValueFunctionApprox\n","from rl.policy_gradient import reinforce_gaussian, actor_critic_gaussian, \\\n","    actor_critic_advantage_gaussian, actor_critic_td_error_gaussian\n","from rl.gen_utils.plot_funcs import plot_list_of_curves\n","import itertools\n","import numpy as np"],"metadata":{"id":"FoXNgfQC5mNk","executionInfo":{"status":"ok","timestamp":1679039144359,"user_tz":420,"elapsed":9,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"id":"tGQfcKV_5Abl","executionInfo":{"status":"ok","timestamp":1679041560556,"user_tz":420,"elapsed":197,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}}},"outputs":[],"source":["AssetAllocState = Tuple[int, float]\n","\n","\n","@dataclass(frozen=True)\n","class AssetAllocPG:\n","    risky_return_distributions: Sequence[Distribution[float]]\n","    riskless_returns: Sequence[float]\n","    utility_func: Callable[[float, int], float]\n","    policy_feature_funcs: Sequence[Callable[[AssetAllocState], float]]\n","    policy_mean_dnn_spec: DNNSpec\n","    policy_stdev: float\n","    initial_wealth_distribution: Distribution[float]\n","\n","    def time_steps(self) -> int:\n","        return len(self.risky_return_distributions)\n","\n","    def get_mdp(self) -> MarkovDecisionProcess[AssetAllocState, float]:\n","        \"\"\"\n","        State is (Wealth W_t, Time t), Action is investment in risky asset x_t\n","        Investment in riskless asset is W_t - x_t\n","        \"\"\"\n","\n","        steps: int = self.time_steps()\n","        distrs: Sequence[Distribution[float]] = self.risky_return_distributions\n","        rates: Sequence[float] = self.riskless_returns\n","        utility_f: Callable[[float, int], float] = self.utility_func\n","\n","        class AssetAllocMDP(MarkovDecisionProcess[AssetAllocState, float]):\n","\n","            def step(\n","                self,\n","                state: NonTerminal[AssetAllocState],\n","                action: float\n","                \n","            ) -> SampledDistribution[Tuple[State[AssetAllocState], float]]:\n","\n","                def sr_sampler_func(\n","                    state=state,\n","                    action=action\n","                    \n","                ) -> Tuple[State[AssetAllocState], float]:\n","                    time, wealth = state.state\n","                    next_wealth: float = action * wealth * (1 + distrs[time].sample()) \\\n","                        + wealth * (1 - action) * (1 + rates[time]) \n","                    reward: float = utility_f(next_wealth, time) \\\n","                        if time == steps - 1 else 0.\n","                    next_pair: AssetAllocState = (time + 1, next_wealth)\n","                    next_state: State[AssetAllocState] = \\\n","                        Terminal(next_pair) if time == steps - 1 \\\n","                        else NonTerminal(next_pair)\n","                    return (next_state, reward)\n","\n","                return SampledDistribution(sampler=sr_sampler_func)\n","\n","            def actions(self, state: NonTerminal[AssetAllocState]) \\\n","                    -> Sequence[float]:\n","                    return list(np.linspace(0, 1, 11))\n","\n","        return AssetAllocMDP()\n","\n","    def start_states_distribution(self) -> \\\n","            SampledDistribution[NonTerminal[AssetAllocState]]:\n","\n","        def start_states_distribution_func() -> NonTerminal[AssetAllocState]:\n","            wealth: float = self.initial_wealth_distribution.sample()\n","            return NonTerminal((0, wealth))\n","\n","        return SampledDistribution(sampler=start_states_distribution_func)\n","\n","    def policy_mean_approx(self) -> \\\n","            FunctionApprox[NonTerminal[AssetAllocState]]:\n","        adam_gradient: AdamGradient = AdamGradient(\n","            learning_rate=0.003,\n","            decay1=0.9,\n","            decay2=0.999\n","        )\n","        ffs: List[Callable[[NonTerminal[AssetAllocState]], float]] = []\n","        for f in self.policy_feature_funcs:\n","            def this_f(st: NonTerminal[AssetAllocState], f=f) -> float:\n","                return f(st.state)\n","            ffs.append(this_f)\n","        return DNNApprox.create(\n","            feature_functions=ffs,\n","            dnn_spec=self.policy_mean_dnn_spec,\n","            adam_gradient=adam_gradient\n","        )\n","\n","    def reinforce(self) -> \\\n","            Iterator[FunctionApprox[NonTerminal[AssetAllocState]]]:\n","        return reinforce_gaussian(\n","            mdp=self.get_mdp(),\n","            policy_mean_approx0=self.policy_mean_approx(),\n","            start_states_distribution=self.start_states_distribution(),\n","            policy_stdev=self.policy_stdev,\n","            gamma=1.0,\n","            episode_length_tolerance=1e-5\n","        )\n","\n","    def vf_adam_gradient(self) -> AdamGradient:\n","        return AdamGradient(\n","            learning_rate=0.003,\n","            decay1=0.9,\n","            decay2=0.999\n","        )\n","\n","    def q_value_func_approx(\n","        self,\n","        feature_functions: Sequence[Callable[\n","            [Tuple[AssetAllocState, float]], float]],\n","        dnn_spec: DNNSpec\n","    ) -> QValueFunctionApprox[AssetAllocState, float]:\n","        adam_gradient: AdamGradient = self.vf_adam_gradient()\n","        ffs: List[Callable[[Tuple[NonTerminal[\n","            AssetAllocState], float]], float]] = []\n","        for f in feature_functions:\n","            def this_f(\n","                pair: Tuple[NonTerminal[AssetAllocState], float],\n","                f=f\n","            ) -> float:\n","                return f((pair[0].state, pair[1]))\n","            ffs.append(this_f)\n","\n","        return DNNApprox.create(\n","            feature_functions=ffs,\n","            dnn_spec=dnn_spec,\n","            adam_gradient=adam_gradient\n","        )\n","\n","    def value_funcion_approx(\n","        self,\n","        feature_functions: Sequence[Callable[[AssetAllocState], float]],\n","        dnn_spec: DNNSpec\n","    ) -> ValueFunctionApprox[AssetAllocState]:\n","        adam_gradient: AdamGradient = self.vf_adam_gradient()\n","        ffs: List[Callable[[NonTerminal[AssetAllocState]], float]] = []\n","        for vf in feature_functions:\n","            def this_vf(\n","                state: NonTerminal[AssetAllocState],\n","                vf=vf\n","            ) -> float:\n","                return vf(state.state)\n","            ffs.append(this_vf)\n","\n","        return DNNApprox.create(\n","            feature_functions=ffs,\n","            dnn_spec=dnn_spec,\n","            adam_gradient=adam_gradient\n","        )\n","\n","    def actor_critic(\n","        self,\n","        feature_functions: Sequence[Callable[\n","            [Tuple[AssetAllocState, float]], float]],\n","        q_value_dnn_spec: DNNSpec\n","    ) -> Iterator[FunctionApprox[NonTerminal[AssetAllocState]]]:\n","        q_value_func_approx0: QValueFunctionApprox[AssetAllocState, float] = \\\n","            self.q_value_func_approx(feature_functions, q_value_dnn_spec)\n","\n","        return actor_critic_gaussian(\n","            mdp=self.get_mdp(),\n","            policy_mean_approx0=self.policy_mean_approx(),\n","            q_value_func_approx0=q_value_func_approx0,\n","            start_states_distribution=self.start_states_distribution(),\n","            policy_stdev=self.policy_stdev,\n","            gamma=1.0,\n","            max_episode_length=self.time_steps()\n","        )\n","\n","    def actor_critic_advantage(\n","        self,\n","        q_feature_functions: Sequence[Callable[\n","            [Tuple[AssetAllocState, float]], float]],\n","        q_dnn_spec: DNNSpec,\n","        v_feature_functions: Sequence[Callable[[AssetAllocState], float]],\n","        v_dnn_spec: DNNSpec\n","    ) -> Iterator[FunctionApprox[NonTerminal[AssetAllocState]]]:\n","        q_value_func_approx0: QValueFunctionApprox[AssetAllocState, float] = \\\n","            self.q_value_func_approx(q_feature_functions, q_dnn_spec)\n","        value_func_approx0: ValueFunctionApprox[AssetAllocState] = \\\n","            self.value_funcion_approx(v_feature_functions, v_dnn_spec)\n","        return actor_critic_advantage_gaussian(\n","            mdp=self.get_mdp(),\n","            policy_mean_approx0=self.policy_mean_approx(),\n","            q_value_func_approx0=q_value_func_approx0,\n","            value_func_approx0=value_func_approx0,\n","            start_states_distribution=self.start_states_distribution(),\n","            policy_stdev=self.policy_stdev,\n","            gamma=1.0,\n","            max_episode_length=self.time_steps()\n","        )\n","\n","    def actor_critic_td_error(\n","        self,\n","        feature_functions: Sequence[Callable[[AssetAllocState], float]],\n","        q_value_dnn_spec: DNNSpec\n","    ) -> Iterator[FunctionApprox[NonTerminal[AssetAllocState]]]:\n","        value_func_approx0: ValueFunctionApprox[AssetAllocState] = \\\n","            self.value_funcion_approx(feature_functions, q_value_dnn_spec)\n","        return actor_critic_td_error_gaussian(\n","            mdp=self.get_mdp(),\n","            policy_mean_approx0=self.policy_mean_approx(),\n","            value_func_approx0=value_func_approx0,\n","            start_states_distribution=self.start_states_distribution(),\n","            policy_stdev=self.policy_stdev,\n","            gamma=1.0,\n","            max_episode_length=self.time_steps()\n","        )  "]},{"cell_type":"code","source":["steps: int = 5\n","μ: float = 0.07\n","σ: float = 0.3\n","r: float = 0.02\n","a: float = 1.0\n","init_wealth: float = 1.0\n","init_wealth_stdev: float = 0.1\n","policy_stdev: float = 0.5\n","\n","excess: float = μ - r\n","var: float = σ * σ\n","base_alloc: float = excess / (a * var)\n","\n","risky_ret: Sequence[Gaussian] = [Gaussian(μ=μ, σ=σ) for _ in range(steps)]\n","riskless_ret: Sequence[float] = [r for _ in range(steps)]\n","\n","def time_varying_utility(w, t):\n","  # c1 = 0.25\n","  # c2 = 0.05\n","  a = 1\n","  # if t <= 25:\n","  #   c2 = 0 \n","  # else:\n","  #   c2 = 0.5\n","  # a = c1 + c2 * (t - 25)\n","  return (- np.exp(-a * w)) / a\n","\n","utility_function: Callable[[float, int], float] = time_varying_utility\n","policy_feature_funcs: Sequence[Callable[[AssetAllocState], float]] = \\\n","    [\n","        lambda w_t: (1 + r) ** w_t[1]\n","    ]\n","init_wealth_distr: Gaussian = Gaussian(μ=init_wealth, σ=init_wealth_stdev)\n","policy_mean_dnn_spec: DNNSpec = DNNSpec(\n","    neurons=[],\n","    bias=False,\n","    hidden_activation=lambda x: x,\n","    hidden_activation_deriv=lambda y: np.ones_like(y),\n","    output_activation=lambda x: x,\n","    output_activation_deriv=lambda y: np.ones_like(y)\n",")\n","\n","aad: AssetAllocPG = AssetAllocPG(\n","    risky_return_distributions=risky_ret,\n","    riskless_returns=riskless_ret,\n","    utility_func=utility_function,\n","    policy_feature_funcs=policy_feature_funcs,\n","    policy_mean_dnn_spec=policy_mean_dnn_spec,\n","    policy_stdev=policy_stdev,\n","    initial_wealth_distribution=init_wealth_distr\n",")\n","\n","reinforce_policies: Iterator[FunctionApprox[\n","    NonTerminal[AssetAllocState]]] = aad.reinforce()\n","\n","q_ffs: Sequence[Callable[[Tuple[AssetAllocState, float]], float]] = \\\n","    [\n","        lambda _: 1.,\n","        lambda wt_x: float(wt_x[0][1]),\n","        lambda wt_x: wt_x[0][0] * (1 + r) ** (- wt_x[0][1]),\n","        lambda wt_x: wt_x[1] * (1 + r) ** (- wt_x[0][1]),\n","        lambda wt_x: (wt_x[1] * (1 + r) ** (- wt_x[0][1])) ** 2,\n","    ]\n","dnn_qvf_spec: DNNSpec = DNNSpec(\n","    neurons=[],\n","    bias=False,\n","    hidden_activation=lambda x: x,\n","    hidden_activation_deriv=lambda y: np.ones_like(y),\n","    output_activation=lambda x: - np.sign(a) * np.exp(-x),\n","    output_activation_deriv=lambda y: -y\n",")\n","actor_critic_policies: Iterator[FunctionApprox[\n","    NonTerminal[AssetAllocState]]] = aad.actor_critic(\n","        feature_functions=q_ffs,\n","        q_value_dnn_spec=dnn_qvf_spec\n","    )\n","\n","v_ffs: Sequence[Callable[[AssetAllocState], float]] = \\\n","    [\n","        lambda _: 1.,\n","        lambda w_t: float(w_t[1]),\n","        lambda w_t: w_t[0] * (1 + r) ** (- w_t[1])\n","    ]\n","dnn_vf_spec: DNNSpec = DNNSpec(\n","    neurons=[],\n","    bias=False,\n","    hidden_activation=lambda x: x,\n","    hidden_activation_deriv=lambda y: np.ones_like(y),\n","    output_activation=lambda x: - np.sign(a) * np.exp(-x),\n","    output_activation_deriv=lambda y: -y\n",")\n","actor_critic_adv_policies: Iterator[FunctionApprox[\n","    NonTerminal[AssetAllocState]]] = aad.actor_critic_advantage(\n","        q_feature_functions=q_ffs,\n","        q_dnn_spec=dnn_qvf_spec,\n","        v_feature_functions=v_ffs,\n","        v_dnn_spec=dnn_vf_spec\n","    )\n","actor_critic_error_policies: Iterator[FunctionApprox[\n","    NonTerminal[AssetAllocState]]] = aad.actor_critic_td_error(\n","        feature_functions=v_ffs,\n","        q_value_dnn_spec=dnn_vf_spec\n","    )"],"metadata":{"id":"k1S0pb3A6B1t","executionInfo":{"status":"ok","timestamp":1679041582517,"user_tz":420,"elapsed":152,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["num_episodes: int = 500000\n","\n","x: Sequence[int] = range(num_episodes)\n","y0: Sequence[float] = [base_alloc * (1 + r) ** (1 - steps)] * num_episodes\n","y1: Sequence[float] = [p(NonTerminal((init_wealth, 0))) for p in\n","                        itertools.islice(reinforce_policies, num_episodes)]\n","y2: Sequence[float] = [p(NonTerminal((init_wealth, 0))) for p in\n","                        itertools.islice(\n","                            actor_critic_policies,\n","                            0,\n","                            num_episodes * steps,\n","                            steps\n","                        )]\n","y3: Sequence[float] = [p(NonTerminal((init_wealth, 0))) for p in\n","                        itertools.islice(\n","                            actor_critic_adv_policies,\n","                            0,\n","                            num_episodes * steps,\n","                            steps\n","                        )]\n","y4: Sequence[float] = [p(NonTerminal((init_wealth, 0))) for p in\n","                        itertools.islice(\n","                            actor_critic_error_policies,\n","                            0,\n","                            num_episodes * steps,\n","                            steps\n","                        )]"],"metadata":{"id":"arhrjBhQEied"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Analytical Solution\")\n","print(\"-------------------\")\n","print()\n","\n","for t in range(steps):\n","    left: int = steps - t\n","    growth: float = (1 + r) ** (left - 1)\n","    alloc: float = base_alloc / growth\n","    print(f\"Time {t:d}: Optimal Risky Allocation = {alloc:.3f}\")\n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yNBIFUuOCXpj","executionInfo":{"status":"ok","timestamp":1679041591926,"user_tz":420,"elapsed":177,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}},"outputId":"4104b704-6874-4a84-ad60-4c0de84ffb1f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Analytical Solution\n","-------------------\n","\n","Time 0: Optimal Risky Allocation = 51.325\n","\n","Time 1: Optimal Risky Allocation = 52.351\n","\n","Time 2: Optimal Risky Allocation = 53.398\n","\n","Time 3: Optimal Risky Allocation = 54.466\n","\n","Time 4: Optimal Risky Allocation = 55.556\n","\n"]}]},{"cell_type":"code","source":["\n","y_vals = []\n","for y in [y0, y1, y2, y4]:\n","    y_vals.append([np.mean(y[i * plot_period:(i + 1) * plot_period])\n","                    for i in range(start, int(num_episodes / plot_period))])\n","print(x_vals)\n","print(y_vals)\n","\n","plot_list_of_curves(\n","    x_vals,\n","    y_vals,\n","    [\"k--\", \"r-x\", \"g-.\", \"b-\"],\n","    [\"True\", \"REINFORCE\", \"Actor-Critic\", \"Actor-Critic with TD Error\"],\n","    \"Iteration\",\n","    \"Action\",\n","    \"Action for Initial Wealth at Time 0\"\n",")"],"metadata":{"id":"xYouJUhJClBR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Policy Gradient Solution: Reinforce\")\n","print(\"-----------------------------------\")\n","print()\n","opt_policies: Sequence[FunctionApprox[NonTerminal[AssetAllocState]]] = \\\n","    list(itertools.islice(reinforce_policies, 10000 * steps))\n","for t in range(steps):\n","    opt_alloc: float = np.mean([p(NonTerminal((init_wealth, t)))\n","                                for p in opt_policies])\n","    print(f\"Time {t:d}: Optimal Risky Allocation = {opt_alloc:.3f}\")\n","    print()"],"metadata":{"id":"sNGXTmNqAeC-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Policy Gradient Solution: Actor Critic\")\n","print(\"--------------------------------------\")\n","print()\n","opt_policies: Sequence[FunctionApprox[NonTerminal[AssetAllocState]]] = \\\n","    list(itertools.islice(actor_critic_policies, 200000 * steps))\n","w = init_wealth\n","wealth_dist = []\n","for t in range(steps):\n","    wealth_dist.append(w)\n","    opt_alloc: float = np.mean([p(NonTerminal((init_wealth, t)))\n","                                for p in opt_policies])\n","    w = w * opt_alloc * (1 + μ) + w * (1 - opt_alloc) * (1 + r)\n","    print(f\"Time {t:d}: Optimal Risky Allocation = {opt_alloc:.3f}\")\n","    print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xvONEIhvC0Px","outputId":"435f0a48-e9f1-4650-f83e-4b583eca1a09","executionInfo":{"status":"ok","timestamp":1679043226639,"user_tz":420,"elapsed":332474,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}}},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Policy Gradient Solution: Actor Critic\n","--------------------------------------\n","\n","Time 0: Optimal Risky Allocation = 4.076\n","\n","Time 1: Optimal Risky Allocation = 4.157\n","\n","Time 2: Optimal Risky Allocation = 4.240\n","\n","Time 3: Optimal Risky Allocation = 4.325\n","\n","Time 4: Optimal Risky Allocation = 4.412\n","\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(list(range(steps)), wealth_dist)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"yXNaBkQ9v2gC","executionInfo":{"status":"ok","timestamp":1679043262073,"user_tz":420,"elapsed":553,"user":{"displayName":"Rajorshi Paul","userId":"11921412492091628289"}},"outputId":"410cc0a8-a818-4388-975c-b27b6d148bd6"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}